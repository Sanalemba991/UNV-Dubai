---
import type { CollectionEntry } from "astro:content";
import AvatarTestimonial from "~/components/ui/AvatarTestimonial.astro";

const { title, testimonials } = Astro.props;

interface Props {
  title: string;
  testimonials: CollectionEntry<"testimonials">[];
}
---

<section
  id="testimonials"
  class="mx-auto w-full px-4 py-8 sm:px-6 sm:py-10 md:px-8 md:py-12 lg:max-w-[85rem] lg:py-14 xl:px-0 2xl:max-w-full opacity-0"
>
  <div class="mb-4 w-full text-center sm:mb-6 md:mb-8">
    <h2 class="text-balance text-2xl font-medium text-neutral-800 dark:text-neutral-200 sm:text-3xl md:text-4xl lg:text-[2.5rem]">
      {title}
    </h2>
  </div>
  
  <div class="grid gap-4 sm:gap-5 md:gap-6 lg:grid-cols-2 xl:grid-cols-3 2xl:gap-8">
    {testimonials.map((testimonial) => (
      <div class="flex h-auto">
        <div class="flex w-full flex-col rounded-xl bg-neutral-50 shadow-sm transition-all hover:shadow-md dark:bg-neutral-700 dark:hover:shadow-neutral-600/30">
          <div class="flex-auto p-4 sm:p-5 md:p-6">
            <p class="text-pretty text-sm italic text-neutral-600 dark:text-neutral-300 sm:text-base md:text-lg">
              {testimonial.data.content}
            </p>
          </div>

          <div class="rounded-b-xl bg-neutral-300/30 p-4 dark:bg-neutral-900/30 sm:p-5 md:px-6">
            <div class="flex items-center">
              <AvatarTestimonial
                src={testimonial.data.avatarSrc.src}
                alt={testimonial.data.avatarAlt}
                class="h-10 w-10 sm:h-12 sm:w-12"
              />
              <div class="ms-3 grow">
                <p class="text-sm font-medium text-neutral-800 dark:text-neutral-200 sm:text-base">
                  {testimonial.data.author}
                </p>
                <p class="text-xs text-neutral-600 dark:text-neutral-400 sm:text-sm">
                  {testimonial.data.role}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

<style lang="css">
  @keyframes fadeInUp {
    0% {
      opacity: 0;
      transform: translateY(50px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-in-up {
    animation: fadeInUp 1s ease-out forwards;
    opacity: 0;
  }

  /* Responsive grid adjustments */
  @media (min-width: 640px) {
    #testimonials {
      grid-template-columns: repeat(1, 1fr);
    }
  }
  @media (min-width: 768px) {
    #testimonials {
      grid-template-columns: repeat(1, 1fr);
    }
  }
  @media (min-width: 1024px) {
    #testimonials {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (min-width: 1280px) {
    #testimonials {
      grid-template-columns: repeat(3, 1fr);
    }
  }
</style>

<script is:inline>
  if (typeof window !== "undefined") {
    document.addEventListener('DOMContentLoaded', () => {
      const section = document.querySelector("#testimonials");
      if (section) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              section.classList.add("fade-in-up");
              observer.unobserve(entry.target);
            }
          });
        }, { 
          threshold: 0.1,
          rootMargin: "0px 0px -50px 0px"
        });

        observer.observe(section);
      }
    });
  }
</script>
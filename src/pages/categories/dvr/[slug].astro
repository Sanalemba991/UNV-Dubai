---
import Layout from "../../../layouts/Layout.astro";
import { getCollection } from "astro:content";

type Props = {
    product: Product;
};

interface ProductImage {
    url: string;
    caption?: string;
    type?: string;
}

interface ProductSpecifications {
    [key: string]: string;
}

interface Product {
    title: string;
    description: string;
    image: string;
    images?: ProductImage[];
    features: string[];
    price?: string;
    specifications: ProductSpecifications;
}

export async function getStaticPaths() {
    const dvrProducts = await getCollection("dvr");
    return dvrProducts.map((entry) => ({
        params: { slug: entry.slug },
        props: { product: entry.data },
    }));
}

const { product } = Astro.props as Props;
const images = product.images || (product.image ? [{ url: product.image }] : []);

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Product schema markup
const structuredData = [
  {
    "@context": "https://schema.org",
    "@type": "Product",
    "name": product.title,
    "description": product.description,
    "image": new URL(product.image, Astro.site).toString(),
    "offers": {
      "@type": "Offer",
      "priceCurrency": "AED",
      "price": product.price || "0.00",
      "availability": "https://schema.org/InStock",
      "itemCondition": "https://schema.org/NewCondition"
    },
    // Add aggregate rating if available
    ...(product.rating && product.reviewCount ? {
      aggregateRating: {
        "@type": "AggregateRating",
        "ratingValue": product.rating,
        "reviewCount": product.reviewCount
      }
    } : {})
  },
  {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "Home",
        "item": new URL("/", Astro.site).toString()
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": "Analog Cameras",
        "item": new URL("/categories/dvr", Astro.site).toString()
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": product.title,
        "item": canonicalURL.toString()
      }
    ]
  }
];

// In your Astro component's script section, you would use it like this:

---

<Layout
  title={`${product.title} - UNV Dubai`}
  structuredData={structuredData}
  description={product.description}
  canonical={canonicalURL.toString()}
>

  <!-- <script type="application/ld+json" set:html={JSON.stringify(productSchema)}></script> -->
    <section class="py-16 relative overflow-hidden">
        <!-- Background elements -->
        <div class="absolute w-96 h-96 -top-48 -left-48 rounded-full bg-blue-500/5 blur-3xl animate-float-slow"></div>
        <div class="absolute w-96 h-96 -bottom-48 -right-48 rounded-full bg-indigo-500/5 blur-3xl animate-float-slow-reverse"></div>

        <div class="container mx-auto px-4 max-w-6xl relative">
            <!-- Breadcrumb Navigation -->
            <div class="mb-8 slide-in-left">
                <div class="flex items-center space-x-2 text-sm">
                    <a href="/" class="text-gray-500 hover:text-blue-600 transition-colors">Home</a>
                    <span class="text-gray-400">/</span>
                    <a href="/categories/dvr" class="text-gray-500 hover:text-blue-600 transition-colors">DVR</a>
                    <span class="text-gray-400">/</span>
                    <span class="text-blue-600 font-medium">{product.title}</span>
                </div>
            </div>

            <!-- Product Header -->
            <div class="text-center mb-8 fade-in-up">
                <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-2 animate-title-reveal">{product.title}</h1>
                <p class="text-gray-600 dark:text-gray-300 max-w-3xl mx-auto animate-fade-up">{product.description}</p>
                {product.price && (
                    <div class="mt-4 text-xl font-semibold text-blue-600">
                        {product.price}
                    </div>
                )}
            </div>

            <div class="grid lg:grid-cols-2 gap-8 slide-in-bottom">
                <!-- Product Image Gallery -->
                <div class="relative group">
                    {images.length > 0 ? (
                        <div class="space-y-4">
                            <!-- Main Image -->
                            <div class="relative rounded-lg overflow-hidden shadow-lg">
                                <img
                                    src={images[0].url}
                                    alt={images[0].caption || product.title}
                                    class="w-full h-auto object-cover transform transition-transform duration-700 group-hover:scale-105"
                                    id="main-image"
                                    loading="lazy"
                                />
                                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent pointer-events-none"></div>
                            </div>

                            <!-- Thumbnail Gallery with Integrated Navigation -->
                            {images.length > 1 && (
                                <div class="flex items-center gap-4">
                                    <!-- Previous Button -->
                                    <button
                                        class="nav-btn w-10 h-10 bg-white dark:bg-gray-700 rounded-full shadow-md flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-600 transition-all"
                                        onclick="navigateGallery(-1)"
                                        aria-label="Previous image"
                                    >
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-700 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                    
                                    <!-- Thumbnails Container -->
                                    <div class="flex-1 overflow-x-auto py-2">
                                        <div class="grid grid-flow-col auto-cols-fr gap-2">
                                            {images.map((image, index) => (
                                                <button
                                                    class={`thumbnail-btn relative min-w-[60px] rounded-md overflow-hidden transition-all duration-300 ${index === 0 ? 'active-thumbnail' : ''}`}
                                                    onclick={`updateMainImage('${image.url}', this)`}
                                                    aria-label={`View image ${index + 1}`}
                                                >
                                                    <img
                                                        src={image.url}
                                                        alt={image.caption || `${product.title} - view ${index + 1}`}
                                                        class="w-full h-16 object-cover"
                                                        loading="lazy"
                                                    />
                                                    {image.type && (
                                                        <span class="absolute bottom-1 left-1 bg-black/70 text-white text-xs px-1 rounded">
                                                            {image.type}
                                                        </span>
                                                    )}
                                                </button>
                                            ))}
                                        </div>
                                    </div>
                                    
                                    <!-- Next Button -->
                                    <button
                                        class="nav-btn w-10 h-10 bg-white dark:bg-gray-700 rounded-full shadow-md flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-600 transition-all"
                                        onclick="navigateGallery(1)"
                                        aria-label="Next image"
                                    >
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-700 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                </div>
                            )}
                        </div>
                    ) : (
                        <div class="w-full h-64 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center text-gray-500 dark:text-gray-300">
                            No images available
                        </div>
                    )}
                </div>

                <!-- Product Details -->
                <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg relative overflow-hidden">
                    <!-- Animated background pattern -->
                    <div class="absolute inset-0 opacity-5">
                        <div class="absolute inset-0 bg-[url('/circuit-pattern.svg')] bg-repeat"></div>
                    </div>

                    <div class="relative space-y-6">
                        <!-- Tabs for Features and Specifications -->
                        <div class="tabs-container">
                            <div class="relative flex border-b border-gray-200 dark:border-gray-700 mb-4">
                                <button
                                    class="tab-button flex-1 active px-4 py-3 text-sm font-semibold transition-all duration-300 relative focus:outline-none"
                                    data-tab="features"
                                    aria-selected="true"
                                >
                                    <span class="relative z-10 dark:text-white">Features</span>
                                    <div class="tab-indicator absolute bottom-0 inset-x-0 h-0.5 bg-blue-600 transition-all duration-300"></div>
                                </button>
                                <button
                                    class="tab-button flex-1 px-4 py-3 text-sm font-semibold transition-all duration-300 relative focus:outline-none"
                                    data-tab="specifications"
                                    aria-selected="false"
                                >
                                    <span class="relative z-10 dark:text-white">Specifications</span>
                                    <div class="tab-indicator absolute bottom-0 inset-x-0 h-0.5 bg-transparent transition-all duration-300"></div>
                                </button>
                            </div>

                            <!-- Features Tab Content -->
                            <div class="tab-content block animate-fade" id="features">
                                <div class="space-y-3">
                                    {product.features.map((feature, index) => (
                                        <div class="feature-item flex items-start gap-3 p-2 rounded-lg hover:bg-blue-50 dark:hover:bg-gray-700 transition-colors duration-300 opacity-0 animate-slide-in" style={`animation-delay: ${index * 100}ms;`}>
                                            <div class="flex-shrink-0 w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                                </svg>
                                            </div>
                                            <div>
                                                <h3 class="text-sm font-medium text-gray-900 dark:text-white">{feature}</h3>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            <!-- Specifications Tab Content -->
                            <div class="tab-content hidden animate-fade" id="specifications">
                                <div class="grid grid-cols-2 gap-3">
                                    {Object.entries(product.specifications).map(([key, value], index) => (
                                        <div class="spec-item p-3 rounded-lg bg-gray-50 dark:bg-gray-700 opacity-0 animate-slide-in" style={`animation-delay: ${index * 100}ms;`}>
                                            <div class="text-xs text-gray-500 dark:text-gray-300">{key}</div>
                                            <div class="text-sm font-bold text-gray-900 dark:text-white">{value}</div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>

                        <!-- CTA Buttons -->
                        <div class="space-y-3">
                            <a
                                href="/contact"
                                class="group relative inline-flex items-center justify-center w-auto px-3 py-1.5 rounded-lg bg-gradient-to-br from-blue-600 to-indigo-600 text-white font-semibold overflow-hidden hover:shadow-blue-500/20 transition-all duration-300"
                            >
                                <span class="absolute inset-0 w-full h-full bg-gradient-to-br from-blue-500 to-indigo-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
                                <span class="relative z-10">Request Quote</span>
                                <svg
                                    class="ml-2 w-4 h-4 text-white transition-transform duration-300 group-hover:translate-x-2"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M9 5l7 7-7 7"
                                    />
                                </svg>
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Related Products Section -->
           
        </div>
    </section>
</Layout>

<style is:global>
   .thumbnail-btn {
    aspect-ratio: 1;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    position: relative; /* Add for positioning the animated underline */
}

/* Remove hover transform effect */
.thumbnail-btn:hover {
    border-color: #3b82f6;
    transform: none; /* Remove the scale effect */
}

/* Create a pseudo-element for the animated underline */
.thumbnail-btn::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0; /* Start with 0 width */
    height: 3px;
    background-color: #2563eb;
    transition: width 0.3s ease;
}

.thumbnail-btn.active-thumbnail {
    border: 2px solid transparent; /* Keep side borders transparent */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Animate the underline from left to right */
.thumbnail-btn.active-thumbnail::after {
    width: 100%; /* Expand to full width */
}

/* Remove hover effect on the main image */
#main-image:hover {
    transform: none !important;
}

/* Add this keyframe for the underline animation */
@keyframes underline-slide-right {
    from { width: 0; }
    to { width: 100%; }
}
    /* Animation Styles */
    @keyframes float-slow {
        0% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
        100% { transform: translateY(0px); }
    }

    @keyframes float-slow-reverse {
        0% { transform: translateY(0px); }
        50% { transform: translateY(10px); }
        100% { transform: translateY(0px); }
    }

    @keyframes slide-in-left {
        from { transform: translateX(-30px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }

    @keyframes slide-in-bottom {
        from { transform: translateY(30px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @keyframes slide-in-bottom-delay {
        from { transform: translateY(30px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @keyframes fade-in-up {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @keyframes title-reveal {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @keyframes slide-in {
        from { transform: translateX(-30px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @keyframes fade {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .animate-float-slow {
        animation: float-slow 8s ease-in-out infinite;
    }

    .animate-float-slow-reverse {
        animation: float-slow-reverse 8s ease-in-out infinite;
    }

    .slide-in-left {
        animation: slide-in-left 0.8s ease-out forwards;
    }

    .slide-in-bottom {
        animation: slide-in-bottom 0.8s ease-out forwards;
    }

    .slide-in-bottom-delay {
        animation: slide-in-bottom 0.8s ease-out 0.5s forwards;
    }

    .fade-in-up {
        animation: fade-in-up 0.8s ease-out forwards;
    }

    .animate-title-reveal {
        animation: title-reveal 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
    }

    .animate-slide-in {
        animation: slide-in 0.6s ease-out forwards;
    }

    .animate-fade {
        animation: fade 0.3s ease-out forwards;
    }

    /* Tab Styles */
    .tab-button.active .tab-indicator {
        background-color: #2563eb;
    }

    .tab-button:not(.active) .tab-indicator {
        background-color: transparent;
    }
</style>

<script is:inline>
    // Image gallery navigation functions
    function updateMainImage(imageUrl, thumbnailElement) {
        const mainImage = document.getElementById('main-image');
        if (mainImage) {
            mainImage.src = imageUrl;
        }

        // Remove active state from all thumbnails
        const thumbnails = document.querySelectorAll('.thumbnail-btn');
        thumbnails.forEach(thumb => thumb.classList.remove('active-thumbnail'));

        // Add active state to clicked thumbnail
        if (thumbnailElement) {
            // Trigger animation by temporarily removing and re-adding class
            thumbnailElement.classList.add('active-thumbnail');
        }
    }

    function navigateGallery(direction) {
        const thumbnails = document.querySelectorAll('.thumbnail-btn');
        let currentIndex = Array.from(thumbnails).findIndex(thumb => 
            thumb.classList.contains('active-thumbnail')
        );
        
        if (currentIndex === -1) currentIndex = 0;
        
        let newIndex = currentIndex + direction;
        
        // Wrap around if needed
        if (newIndex < 0) newIndex = thumbnails.length - 1;
        if (newIndex >= thumbnails.length) newIndex = 0;
        
        // Update main image and thumbnail state
        const newThumbnail = thumbnails[newIndex];
        if (newThumbnail) {
            updateMainImage(newThumbnail.querySelector('img').src, newThumbnail);
            
            // Scroll thumbnails container to make active thumbnail visible
            const container = document.querySelector('.overflow-x-auto');
            if (container) {
                const containerWidth = container.offsetWidth;
                const thumbWidth = newThumbnail.offsetWidth;
                const scrollPosition = newThumbnail.offsetLeft - (containerWidth / 2) + (thumbWidth / 2);
                
                container.scrollTo({
                    left: scrollPosition,
                    behavior: 'smooth'
                });
            }
        }
    }

    // Tab functionality
    document.addEventListener("DOMContentLoaded", () => {
        const tabs = document.querySelectorAll(".tab-button");
        const contents = document.querySelectorAll(".tab-content");

        function setActiveTab(tab) {
            if (!tab) return;
            
            tab.setAttribute("aria-selected", "true");
            const indicator = tab.querySelector(".tab-indicator");
            if (indicator) {
                indicator.style.backgroundColor = "#2563eb";
            }

            // Remove active state from other tabs
            tabs.forEach(t => {
                if (t !== tab) {
                    t.setAttribute("aria-selected", "false");
                    const otherIndicator = t.querySelector(".tab-indicator");
                    if (otherIndicator) {
                        otherIndicator.style.backgroundColor = "transparent";
                    }
                }
            });
        }

        // Set initial active tab
        const initialActiveTab = document.querySelector('.tab-button[data-tab="features"]');
        setActiveTab(initialActiveTab);

        // Add click handlers
        tabs.forEach(tab => {
            tab.addEventListener("click", () => {
                const targetId = tab.getAttribute("data-tab");
                setActiveTab(tab);

                // Show/hide content
                contents.forEach(content => {
                    if (content.id === targetId) {
                        content.classList.remove("hidden");
                        content.classList.add("block");
                        // Trigger animation
                        content.classList.remove("animate-fade");
                        void content.offsetWidth;
                        content.classList.add("animate-fade");
                    } else {
                        content.classList.remove("block");
                        content.classList.add("hidden");
                    }
                });
            });
        });
    });
</script>
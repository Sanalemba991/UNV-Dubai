---
import Layout from "~/layouts/Layout.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Logo from "../assets/images/UNVLOGO.png";

export async function getStaticPaths() {
  const insightPosts = await getCollection("insights");
  return insightPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const formattedDate = new Date(post.data.pubDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Get related insights
const allInsights = await getCollection("insights");
const relatedInsights = allInsights
  .filter(insight => insight.slug !== post.slug)
  .slice(0, 3);

// SEO meta data
const title = `${post.data.title} | UNV Camera Dubai `;
const description = post.data.description;
const canonicalUrl = new URL(`/insights/${post.slug}`, Astro.site);


// JSON-LD Structured Data

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title,
  "description": description,
  "url": canonicalUrl.toString(),
  "image": `${Astro.site}${post.data.cardImage}`,
  "datePublished": post.data.pubDate,
  "dateModified": post.data.pubDate, // Update if you have a modified date
  "author": {
    "@type": "Organization",
    "name": "UNV Dubai",
    "url": Astro.site
  },
  "publisher": {
    "@type": "Organization",
    "name": "UNV Dubai",
    "logo": {
      "@type": "ImageObject",
      "url": Logo.src // âœ… This is now correctly referencing the imported logo
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalUrl.toString()
  }
};
---

<Layout
  title={title}
  description={description}
  canonical={canonicalUrl.toString()}

  structuredData={structuredData}
>
  <div class="bg-gradient-to-b from-blue-50 to-white dark:from-gray-900 dark:to-gray-800 min-h-screen">
    <article class="py-8 sm:py-12 md:py-16">
      <div class="mx-auto max-w-6xl px-4 sm:px-6">
        <!-- Header section with animation -->
        <header class="mb-8 sm:mb-10 md:mb-12 opacity-0 translate-y-8" data-animation="fade-in-down">
          <h1 class="text-2xl xs:text-3xl sm:text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-3 sm:mb-4">
            {post.data.title}
          </h1>
          <p class="text-base sm:text-lg md:text-xl text-gray-600 dark:text-gray-300 mb-4 sm:mb-6">
            {post.data.description}
          </p>
          <div class="flex items-center text-sm sm:text-base text-gray-500 dark:text-gray-400">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <span>{formattedDate}</span>
          </div>
        </header>
        
        <!-- Main content with image on left and info on right -->
        <div class="flex flex-col lg:flex-row gap-6 sm:gap-8 mb-8 sm:mb-12">
          <!-- Left column with main image -->
          <div class="lg:w-2/3 opacity-0 scale-95" data-animation="fade-in-scale">
            <div class="rounded-lg sm:rounded-xl overflow-hidden shadow-lg sm:shadow-xl transition-all duration-300 hover:shadow-xl sm:hover:shadow-2xl">
              <Image
                src={post.data.cardImage}
                alt={post.data.cardImageAlt}
                width={1200}
                height={800}
                format="webp"
                quality={90}
                class="w-full h-auto object-cover"
              />
            </div>
           
            
            <!-- Main content section -->
            <div class="mt-6 sm:mt-8 prose prose-sm xs:prose-base sm:prose-lg dark:prose-invert max-w-none opacity-0 translate-y-4" data-animation="fade-in-up">
              <Fragment set:html={post.data.content} />
            </div>
          </div>
          
          <!-- Right column with product info and related posts -->
          <div class="lg:w-1/3 space-y-6 sm:space-y-8">
            <!-- Product specifications card -->
            {post.data.specifications && (
              <div class="bg-white dark:bg-gray-800 rounded-lg sm:rounded-xl shadow-md sm:shadow-lg p-4 sm:p-6 opacity-0 translate-x-8" data-animation="fade-in-right">
                <h3 class="text-lg sm:text-xl font-bold text-gray-900 dark:text-white mb-3 sm:mb-4">Product Specifications</h3>
                <ul class="space-y-2 sm:space-y-3">
                  {post.data.specifications.map((spec) => (
                    <li class="flex items-start">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                      </svg>
                      <span class="text-sm sm:text-base text-gray-700 dark:text-gray-300">{spec}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            <!-- Contact card -->
            <div class="bg-blue-600 dark:bg-blue-800 rounded-lg sm:rounded-xl shadow-md sm:shadow-lg p-4 sm:p-6 text-white opacity-0 translate-x-8" data-animation="fade-in-right" data-delay="200">
              <h3 class="text-lg sm:text-xl font-bold mb-3 sm:mb-4">Interested in this product?</h3>
              <p class="text-sm sm:text-base mb-3 sm:mb-4">Our team is ready to help you find the perfect solution for your surveillance needs.</p>
              <a href="/contact" class="inline-block bg-white text-blue-600 font-medium px-4 py-1.5 sm:px-5 sm:py-2 rounded-md sm:rounded-lg hover:bg-gray-100 transition-colors text-sm sm:text-base">
                Contact Sales
              </a>
            </div>
            
            <!-- Related insights -->
            {relatedInsights.length > 0 && (
              <div class="bg-white dark:bg-gray-800 rounded-lg sm:rounded-xl shadow-md sm:shadow-lg p-4 sm:p-6 opacity-0 translate-x-8" data-animation="fade-in-right" data-delay="400">
                <h3 class="text-lg sm:text-xl font-bold text-gray-900 dark:text-white mb-3 sm:mb-4">Related Insights</h3>
                <div class="space-y-3 sm:space-y-4">
                  {relatedInsights.map((insight) => (
                    <a href={`/insights/${insight.slug}`} class="block group">
                      <div class="flex items-start">
                        <div class="w-12 h-12 sm:w-16 sm:h-16 rounded overflow-hidden flex-shrink-0 mr-3 sm:mr-4">
                          <Image
                            src={insight.data.cardImage}
                            alt={insight.data.title}
                            width={200}
                            height={200}
                            format="webp"
                            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                          />
                        </div>
                        <div>
                          <h4 class="text-sm sm:text-base font-medium text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                            {insight.data.title}
                          </h4>
                          <p class="text-xs sm:text-sm text-gray-500 dark:text-gray-400">
                            {new Date(insight.data.pubDate).toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric'
                            })}
                          </p>
                        </div>
                      </div>
                    </a>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Technical features from metadata if available -->
            {post.data.features && (
              <div class="bg-white dark:bg-gray-800 rounded-lg sm:rounded-xl shadow-md sm:shadow-lg p-4 sm:p-6 opacity-0 translate-x-8" data-animation="fade-in-right" data-delay="600">
                <h3 class="text-lg sm:text-xl font-bold text-gray-900 dark:text-white mb-3 sm:mb-4">Key Features</h3>
                <ul class="space-y-2 sm:space-y-3">
                  {post.data.features.map((feature) => (
                    <li class="flex items-start">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                      </svg>
                      <span class="text-sm sm:text-base text-gray-700 dark:text-gray-300">{feature}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      </div>
    </article>
  </div>
</Layout>

<script>
  // Animation script to handle reveal animations
  document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('[data-animation]');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          const animation = element.getAttribute('data-animation');
          const delay = element.getAttribute('data-delay') || 0;
          
          setTimeout(() => {
            // Apply animation class based on the data-animation attribute
            switch(animation) {
              case 'fade-in-down':
                element.classList.add('animate-fade-in-down');
                break;
              case 'fade-in-up':
                element.classList.add('animate-fade-in-up');
                break;
              case 'fade-in-right':
                element.classList.add('animate-fade-in-right');
                break;
              case 'fade-in-scale':
                element.classList.add('animate-fade-in-scale');
                break;
              default:
                element.classList.add('animate-fade-in');
            }
            
            element.style.opacity = '1';
            element.style.transform = 'translate(0) scale(1)';
          }, parseInt(delay));
          
          observer.unobserve(element);
        }
      });
    }, {
      threshold: 0.1
    });
    
    animatedElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>

<style>
  /* Animation classes */
  .animate-fade-in-down {
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .animate-fade-in-up {
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .animate-fade-in-right {
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .animate-fade-in-scale {
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  /* Responsive typography adjustments */
  @media (max-width: 320px) {
    .prose-sm {
      font-size: 0.875rem;
      line-height: 1.5;
    }
    .prose-sm h2 {
      font-size: 1.25rem;
    }
    .prose-sm h3 {
      font-size: 1.125rem;
    }
  }
  
  @media (min-width: 321px) and (max-width: 375px) {
    .prose-sm {
      font-size: 0.9375rem;
    }
  }
  
  @media (min-width: 376px) and (max-width: 425px) {
    .prose-sm {
      font-size: 1rem;
    }
  }
  
  @media (min-width: 426px) and (max-width: 768px) {
    .prose-sm {
      font-size: 1.0625rem;
    }
  }
  
  /* Adding hover effects for better UX */
  .prose img {
    border-radius: 0.5rem;
    transition: transform 0.3s ease-out;
  }
  
  .prose img:hover {
    transform: scale(1.02);
  }
  
  /* Mobile-specific adjustments */
  @media (max-width: 768px) {
    [data-animation] {
      opacity: 1 !important;
      transform: none !important;
      transition: none !important;
    }
  }
</style>